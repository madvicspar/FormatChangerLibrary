// <auto-generated />
using System;
using FormatChanger.Utilities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormatChanger.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormatChanger.Models.CaptionSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TextSettingsId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TextSettingsId");

                    b.ToTable("CaptionSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.CellSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BottomPadding")
                        .HasColumnType("integer");

                    b.Property<int>("LeftPadding")
                        .HasColumnType("integer");

                    b.Property<int>("RightPadding")
                        .HasColumnType("integer");

                    b.Property<long>("TextSettingsId")
                        .HasColumnType("bigint");

                    b.Property<int>("TopPadding")
                        .HasColumnType("integer");

                    b.Property<string>("VerticalAlignment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TextSettingsId");

                    b.ToTable("CellSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.CorrectionResultsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CorrectedDocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormattingTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CorrectedDocumentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FormattingTemplateId");

                    b.ToTable("CorrectionResults");
                });

            modelBuilder.Entity("FormatChanger.Models.DocumentModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FormatChanger.Models.DocumentSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasImageCaptions")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPageNumbers")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasTableCaptions")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DocumentSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.EvaluationResultsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("EvaluationSystemModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormattingTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EvaluationSystemModelId");

                    b.HasIndex("FormattingTemplateId");

                    b.ToTable("EvaluationResults");
                });

            modelBuilder.Entity("FormatChanger.Models.EvaluationSystemModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("FreeCoefficient")
                        .HasColumnType("integer");

                    b.Property<int>("HeaderWeight")
                        .HasColumnType("integer");

                    b.Property<int>("ImageWeight")
                        .HasColumnType("integer");

                    b.Property<int>("ListWeight")
                        .HasColumnType("integer");

                    b.Property<int>("TableWeight")
                        .HasColumnType("integer");

                    b.Property<int>("TextWeight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EvaluationSystems");
                });

            modelBuilder.Entity("FormatChanger.Models.FormattingTemplateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DocumentSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HeadingSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ListSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TableSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TextSettingsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentSettingsId");

                    b.HasIndex("HeadingSettingsId");

                    b.HasIndex("ImageSettingsId");

                    b.HasIndex("ListSettingsId");

                    b.HasIndex("TableSettingsId");

                    b.HasIndex("TextSettingsId");

                    b.ToTable("FormattingTemplates");
                });

            modelBuilder.Entity("FormatChanger.Models.HeaderSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CellSettingsId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasRepetitions")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CellSettingsId");

                    b.ToTable("HeaderSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.HeadingSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HeadingLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("StartOnNewPage")
                        .HasColumnType("boolean");

                    b.Property<long>("TextSettingsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TextSettingsId");

                    b.ToTable("HeadingSettingsModel");
                });

            modelBuilder.Entity("FormatChanger.Models.ImageSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AfterSpacing")
                        .HasColumnType("real");

                    b.Property<float>("BeforeSpacing")
                        .HasColumnType("real");

                    b.Property<float>("FirstLine")
                        .HasColumnType("real");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("KeepWithNext")
                        .HasColumnType("boolean");

                    b.Property<float>("Left")
                        .HasColumnType("real");

                    b.Property<float>("LineSpacing")
                        .HasColumnType("real");

                    b.Property<float>("Right")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ImageSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.ListSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("EndType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsNumeric")
                        .HasColumnType("boolean");

                    b.Property<int>("ListLevel")
                        .HasColumnType("integer");

                    b.Property<string>("MarkerType")
                        .HasColumnType("text");

                    b.Property<long>("TextSettingsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TextSettingsId");

                    b.ToTable("ListSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.TableSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AfterSpacing")
                        .HasColumnType("real");

                    b.Property<float>("BeforeSpacing")
                        .HasColumnType("real");

                    b.Property<long>("CaptionSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CellSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HeaderSettingsModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CaptionSettingsId");

                    b.HasIndex("CellSettingsId");

                    b.HasIndex("HeaderSettingsModelId");

                    b.ToTable("TableSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.TextSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AfterSpacing")
                        .HasColumnType("real");

                    b.Property<float>("BeforeSpacing")
                        .HasColumnType("real");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("FirstLine")
                        .HasColumnType("real");

                    b.Property<string>("Font")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("FontSize")
                        .HasColumnType("real");

                    b.Property<bool>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnderscore")
                        .HasColumnType("boolean");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("KeepWithNext")
                        .HasColumnType("boolean");

                    b.Property<float>("Left")
                        .HasColumnType("real");

                    b.Property<float>("LineSpacing")
                        .HasColumnType("real");

                    b.Property<float>("Right")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("TextSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FormatChanger.Models.UserModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("TelegramUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("UserModel");
                });

            modelBuilder.Entity("FormatChanger.Models.CaptionSettingsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.TextSettingsModel", "TextSettings")
                        .WithMany()
                        .HasForeignKey("TextSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.CellSettingsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.TextSettingsModel", "TextSettings")
                        .WithMany()
                        .HasForeignKey("TextSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.CorrectionResultsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.DocumentModel", "CorrectedDocument")
                        .WithMany()
                        .HasForeignKey("CorrectedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.DocumentModel", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.FormattingTemplateModel", "FormattingTemplate")
                        .WithMany()
                        .HasForeignKey("FormattingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectedDocument");

                    b.Navigation("Document");

                    b.Navigation("FormattingTemplate");
                });

            modelBuilder.Entity("FormatChanger.Models.DocumentModel", b =>
                {
                    b.HasOne("FormatChanger.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormatChanger.Models.EvaluationResultsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.DocumentModel", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.EvaluationSystemModel", "EvaluationSystem")
                        .WithMany()
                        .HasForeignKey("EvaluationSystemModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.FormattingTemplateModel", "FormattingTemplate")
                        .WithMany()
                        .HasForeignKey("FormattingTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("EvaluationSystem");

                    b.Navigation("FormattingTemplate");
                });

            modelBuilder.Entity("FormatChanger.Models.FormattingTemplateModel", b =>
                {
                    b.HasOne("FormatChanger.Models.DocumentSettingsModel", "DocumentSettings")
                        .WithMany()
                        .HasForeignKey("DocumentSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.HeadingSettingsModel", "HeadingSettings")
                        .WithMany()
                        .HasForeignKey("HeadingSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.ImageSettingsModel", "ImageSettings")
                        .WithMany()
                        .HasForeignKey("ImageSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.ListSettingsModel", "ListSettings")
                        .WithMany()
                        .HasForeignKey("ListSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.TableSettingsModel", "TableSettings")
                        .WithMany()
                        .HasForeignKey("TableSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.TextSettingsModel", "TextSettings")
                        .WithMany()
                        .HasForeignKey("TextSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentSettings");

                    b.Navigation("HeadingSettings");

                    b.Navigation("ImageSettings");

                    b.Navigation("ListSettings");

                    b.Navigation("TableSettings");

                    b.Navigation("TextSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.HeaderSettingsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.CellSettingsModel", "CellSettings")
                        .WithMany()
                        .HasForeignKey("CellSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CellSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.HeadingSettingsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.TextSettingsModel", "TextSettings")
                        .WithMany()
                        .HasForeignKey("TextSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.ListSettingsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.TextSettingsModel", "TextSettings")
                        .WithMany()
                        .HasForeignKey("TextSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextSettings");
                });

            modelBuilder.Entity("FormatChanger.Models.TableSettingsModel", b =>
                {
                    b.HasOne("FormatChanger.Models.CaptionSettingsModel", "CaptionSettings")
                        .WithMany()
                        .HasForeignKey("CaptionSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.CellSettingsModel", "CellSettings")
                        .WithMany()
                        .HasForeignKey("CellSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormatChanger.Models.HeaderSettingsModel", "HeaderSettings")
                        .WithMany()
                        .HasForeignKey("HeaderSettingsModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaptionSettings");

                    b.Navigation("CellSettings");

                    b.Navigation("HeaderSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
